// Code generated by mockery v2.33.2. DO NOT EDIT.

package redismock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	service "github.com/benthosdev/benthos/v4/public/service"

	time "time"
)

// RedisMultiCacheAdaptor is an autogenerated mock type for the RedisMultiCacheAdaptor type
type RedisMultiCacheAdaptor struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, key, value, expiration
func (_m *RedisMultiCacheAdaptor) Add(ctx context.Context, key string, value []byte, expiration time.Duration) (bool, error) {
	ret := _m.Called(ctx, key, value, expiration)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, time.Duration) (bool, error)); ok {
		return rf(ctx, key, value, expiration)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, time.Duration) bool); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []byte, time.Duration) error); ok {
		r1 = rf(ctx, key, value, expiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *RedisMultiCacheAdaptor) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, key
func (_m *RedisMultiCacheAdaptor) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, key
func (_m *RedisMultiCacheAdaptor) Get(ctx context.Context, key string) ([]byte, bool, error) {
	ret := _m.Called(ctx, key)

	var r0 []byte
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, bool, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) bool); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, key)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Set provides a mock function with given fields: ctx, key, value, expiration
func (_m *RedisMultiCacheAdaptor) Set(ctx context.Context, key string, value []byte, expiration time.Duration) error {
	ret := _m.Called(ctx, key, value, expiration)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, time.Duration) error); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMulti provides a mock function with given fields: ctx, items
func (_m *RedisMultiCacheAdaptor) SetMulti(ctx context.Context, items ...service.CacheItem) error {
	_va := make([]interface{}, len(items))
	for _i := range items {
		_va[_i] = items[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...service.CacheItem) error); ok {
		r0 = rf(ctx, items...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRedisMultiCacheAdaptor creates a new instance of RedisMultiCacheAdaptor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisMultiCacheAdaptor(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisMultiCacheAdaptor {
	mock := &RedisMultiCacheAdaptor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
