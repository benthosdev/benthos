// Code generated by mockery v2.33.2. DO NOT EDIT.

package redismock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"

	v9 "github.com/redis/go-redis/v9"
)

// RedisCRUD is an autogenerated mock type for the RedisCRUD type
type RedisCRUD struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *RedisCRUD) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Del provides a mock function with given fields: ctx, keys
func (_m *RedisCRUD) Del(ctx context.Context, keys ...string) *v9.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v9.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *v9.IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v9.IntCmd)
		}
	}

	return r0
}

// Get provides a mock function with given fields: ctx, key
func (_m *RedisCRUD) Get(ctx context.Context, key string) *v9.StringCmd {
	ret := _m.Called(ctx, key)

	var r0 *v9.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v9.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v9.StringCmd)
		}
	}

	return r0
}

// Set provides a mock function with given fields: ctx, key, value, expiration
func (_m *RedisCRUD) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) *v9.StatusCmd {
	ret := _m.Called(ctx, key, value, expiration)

	var r0 *v9.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) *v9.StatusCmd); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v9.StatusCmd)
		}
	}

	return r0
}

// SetNX provides a mock function with given fields: ctx, key, value, expiration
func (_m *RedisCRUD) SetNX(ctx context.Context, key string, value interface{}, expiration time.Duration) *v9.BoolCmd {
	ret := _m.Called(ctx, key, value, expiration)

	var r0 *v9.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) *v9.BoolCmd); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v9.BoolCmd)
		}
	}

	return r0
}

// NewRedisCRUD creates a new instance of RedisCRUD. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisCRUD(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisCRUD {
	mock := &RedisCRUD{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
